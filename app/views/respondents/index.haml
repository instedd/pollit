- unless wizard?
  - add_breadcrumb _("Respondents"), poll_respondents_path(@poll)
  = render :partial => 'shared/poll_tabs', :locals => { :poll => @poll, :active_tab => 'respondents' }

- content_for :head do
  = angular_js_include_tag

%div{:class => :content}
  %h1 Bulk phone numbers importing
  .whitebox{:style => "margin-top:-12px;"}
    Add phone numbers manually or upload a CSV file
    %br
    %br
    - unless can_edit
      Because the poll has already started, you can only add respondents. New respondents will be invited after you click 'Save'.
      %br
      %br
    #export_csv
      = button_tag :type => :button, :class => :fimport, :style => 'display:none;' do
        %b Download a sample csv file 
        and fill it with the phone numbers
    #import_csv
      = button_tag :type => :button, :class => :fimport do
        %b Upload it for bulk account creation

%br

= content_tag :div, "ng:controller" => "PhonesCtrl" do
  %ul{:class => "clist w30"}
    %li{"ng:repeat" => "phone in fixed_phones"}
      = text_field_tag "phone.number", "{{phone.number}}", :disabled => true
      = button_tag "", :type => :button, :class => "clist-remove", :disabled => true
    %li{"ng:repeat" => "phone in phones"}
      = text_field_tag "phone.number", "{{phone.number}}", :class => "ux-clist"
      = button_tag "", :type => :button, :class => "clist-remove", "ng:click" => "removePhone(phone.number)"
    %li
      = content_tag :form, "ng:submit" => "addPhone()" do
        = text_field_tag "numberText", "", :class => "ux-text", :placeholder => "Add a new phone..."
        = button_tag "", :type => :button, :class => "clist-add", "ng:click" => "addPhone()"
  %br
  %hr
  
  .actions
    - if wizard?
      = white_link_to _("Back"), poll_channel_path(@poll, :wizard => true)
      = grey_button _("Next"), :type => :button, "ng:click" => "nextStep()"
      = link_to _("Skip this step"), poll_path(@poll, :wizard => true), :class => "wizard-skip"
    - else
      = grey_button _("Save"), :type => :button, "ng:click" => "saveChanges(true)"
      = white_link_to _("Cancel"), @poll

:javascript
  $(document).ready(function() {
    $('#numberText').placeholder();
    $(":input[type=text]").live('focus', function() {
      $(this).numeric({ decimal: false, negative: false });
    });
  });

  function PhonesCtrl() {
    var scope = this;
    scope.phones = #{phones_list.to_json};
    scope.fixed_phones = #{fixed_phones_list.to_json};
    scope.only_add = #{can_edit ? "false" : "true"} ;

    $(document).ready(function() {
      window.setTimeout(function() {
        $("#numberText").focus().blur();
      }, 200);

      new AjaxUpload($('#import_csv'), {
        action: '#{import_csv_poll_respondents_path(@poll)}',
        name: 'csv',
        onSubmit: function(file, ext){
          if(ext != 'csv') {
            $.status.showError('Error: file should be in csv format', 6000)
            return false;
          }
        },
        onComplete: function(file, response){
          var data = eval(response);
          $.each(data, function(i, phone) {
            if (!scope.phoneExists(phone.number)) {
              scope.phones.push(phone);
            }
          });
          scope.$eval();
          $(".ng-directive #numberText").focus().blur();
          $.status.showNotice('File successfully uploaded', 6000);
        }
      });
    });

    scope.phoneExists = function(phoneNumber) {
      var all_phones = _.union(scope.fixed_phones, scope.phones);
      return _.any(all_phones, function(phone) { 
        return phone.number == phoneNumber;
      });
    }

    scope.addPhone = function() {
      if ((!scope.phoneExists(scope.numberText)) && $.trim(scope.numberText) != '') {
        scope.phones.push({number:scope.numberText});
        scope.numberText = '';
      }
    };

    scope.removePhone = function(phoneNumber) {
      scope.phones = _.reject(scope.phones, function(phone) {
        return phone.number == phoneNumber;
      });
      $(".ng-directive #numberText").focus().blur();
    }

    scope.removeEmptyPhones = function() {
      scope.phones = _.reject(scope.phones, function(phone) {
        return $.trim(phone.number) == '';
      })
    }

    scope.saveChanges = function(showNotice, nextUrl) {
      scope.removeEmptyPhones();
      var phones = _.map(scope.phones, function(phone) { return phone.number });
      $.post('#{batch_update_poll_respondents_path}', {'phones': phones}, function(data, textStatus) {
        if (textStatus == "success") {
          scope.onSaved();
          if (showNotice) $.status.showNotice('Phones saved succesfully!', 6000);
          if (nextUrl) location.href = nextUrl;
        } else {
          $.status.showError('Error saving phones', 6000);
        }
      });
    };
    
    scope.onSaved = function() {
      if (scope.only_add) {
        var current_phones = scope.phones;
        scope.phones = [];
        angular.forEach(current_phones, function(phone) {
          scope.fixed_phones.push(phone);
        });
      }
    }

    scope.nextStep = function() {
      scope.saveChanges(false, '#{poll_path(@poll, :wizard => true)}');
    }
  }